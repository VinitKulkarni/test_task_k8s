#this is working code
#vpc, subnet, ig, rt ,association done
#fe and be containers done
#fe container lb accable 
#be container with ip accable
#fe and be container not connected (is the issue)
=================================================
# Store state file in S3
terraform {
  backend "s3" {
    bucket = "vinit-905418074680"
    key    = "terraform.tfstate"
    region = "ap-south-1"
  }
}


# ECS Cluster
resource "aws_ecs_cluster" "my_cluster" {
  name = "app-cluster"
}


# Create a VPC
resource "aws_vpc" "myvpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "myvpc"
  }
}


# public subnet-1a
resource "aws_subnet" "publicSubnet1a" {
  vpc_id                  = aws_vpc.myvpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "ap-south-1a"
  map_public_ip_on_launch = true
}


# public subnet-1b
resource "aws_subnet" "publicSubnet1b" {
  vpc_id                  = aws_vpc.myvpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "ap-south-1b"
  map_public_ip_on_launch = true
}


# Internet gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.myvpc.id
}


# Public Route Table-subnet1a
resource "aws_route_table" "publicRouteTable1a" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
}


# Public Route Table-subnet1b
resource "aws_route_table" "publicRouteTable1b" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
}


# Associate the public subnet with the public route table - 1a
resource "aws_route_table_association" "public_subnet_association1a" {
  subnet_id      = aws_subnet.publicSubnet1a.id
  route_table_id = aws_route_table.publicRouteTable1a.id
}


# Associate the public subnet with the public route table - 1b
resource "aws_route_table_association" "public_subnet_association1b" {
  subnet_id      = aws_subnet.publicSubnet1b.id
  route_table_id = aws_route_table.publicRouteTable1b.id
}

###################################################################


# Security Group for Load Balancer
resource "aws_security_group" "load_balancer_security_group" {
  vpc_id = aws_vpc.myvpc.id
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Security Group for ECS Service
resource "aws_security_group" "service_security_group" {
  vpc_id = aws_vpc.myvpc.id
  ingress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    security_groups = [aws_security_group.load_balancer_security_group.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ALB
resource "aws_alb" "application_load_balancer" {
  name               = "load-balancer-dev"
  load_balancer_type = "application"
  subnets            = [aws_subnet.publicSubnet1a.id, aws_subnet.publicSubnet1b.id]
  security_groups    = [aws_security_group.load_balancer_security_group.id]
}


# Target Group for frontend
resource "aws_lb_target_group" "frontend_tg" {
  name        = "frontend-tg"
  port        = 3000
  protocol    = "HTTP"
  target_type = "ip"
  vpc_id      = aws_vpc.myvpc.id
}



# ALB Listener
resource "aws_lb_listener" "listener" {
  load_balancer_arn = aws_alb.application_load_balancer.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.frontend_tg.arn
  }
}




# Frontend Task Definition
resource "aws_ecs_task_definition" "frontend_task" {
  family                   = "frontend-task"
  requires_compatibilities = ["FARGATE"]
  network_mode             = "awsvpc"
  memory                   = 512
  cpu                      = 256
  execution_role_arn       = "arn:aws:iam::905418074680:role/ecsTaskExecutionRole"

  container_definitions = jsonencode([
    {
      name      = "frontend"
      image     = "905418074680.dkr.ecr.ap-south-1.amazonaws.com/node-frontend:1.0"
      essential = true
      portMappings = [{
        containerPort = 3000
        hostPort      = 3000
      }]
      environment = [{
        name  = "NEXT_PUBLIC_API_URL"
        value = "http://127.0.0.1:8000/"
      }]
    }
  ])
}

# Backend Task Definition
resource "aws_ecs_task_definition" "backend_task" {
  family                   = "backend-task"
  requires_compatibilities = ["FARGATE"]
  network_mode             = "awsvpc"
  memory                   = 512
  cpu                      = 256
  execution_role_arn       = "arn:aws:iam::905418074680:role/ecsTaskExecutionRole"

  container_definitions = jsonencode([
    {
      name      = "backend"
      image     = "905418074680.dkr.ecr.ap-south-1.amazonaws.com/flask-backend:1.5"
      essential = true
      portMappings = [{
        containerPort = 8000
        hostPort      = 8000
      }]
    }
  ])
}


####

# ECS Service for frontend (3 tasks behind ALB)
resource "aws_ecs_service" "frontend_service" {
  name            = "frontend-service"
  cluster         = aws_ecs_cluster.my_cluster.id
  task_definition = aws_ecs_task_definition.frontend_task.arn
  launch_type     = "FARGATE"
  desired_count   = 3

  load_balancer {
    target_group_arn = aws_lb_target_group.frontend_tg.arn
    container_name   = "frontend"
    container_port   = 3000
  }

  network_configuration {
    subnets          = [aws_subnet.publicSubnet1a.id, aws_subnet.publicSubnet1b.id]
    assign_public_ip = true
    security_groups  = [aws_security_group.service_security_group.id]
  }
}


# ECS Service for backend (1 task, no load balancer)
resource "aws_ecs_service" "backend_service" {
  name            = "backend-service"
  cluster         = aws_ecs_cluster.my_cluster.id
  task_definition = aws_ecs_task_definition.backend_task.arn
  launch_type     = "FARGATE"
  desired_count   = 1

  network_configuration {
    subnets          = [aws_subnet.publicSubnet1a.id, aws_subnet.publicSubnet1b.id]
    assign_public_ip = true
    security_groups  = [aws_security_group.service_security_group.id]
  }
}

=================================================
